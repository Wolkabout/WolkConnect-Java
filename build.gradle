/*
 * Copyright (c) 2021 WolkAbout Technology s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

group 'com.wolkabout'

version '4.0.0'

apply plugin: 'java'
apply plugin: 'maven-publish'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5'
    implementation 'commons-codec:commons-codec:1.11'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.0'
    implementation 'org.slf4j:slf4j-api:1.7.26'
    implementation 'javax.xml.bind:jaxb-api:2.2.4'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

    testCompile 'org.mockito:mockito-core:3.3.3'
    testCompile 'junit:junit:4.12'
}

targetCompatibility = 1.8
sourceCompatibility = 1.8

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    if (it.excludeRules.size() > 0) {
                        def exclusions = dependencyNode.appendNode("exclusions")
                        it.excludeRules.each { ExcludeRule rule ->
                            def xmlExclusion = exclusions.appendNode('exclusion')
                            xmlExclusion.appendNode('groupId', rule.group)
                            xmlExclusion.appendNode('artifactId', rule.module)
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "$buildDir/repo"
        }
    }
}